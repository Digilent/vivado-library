-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity StreamDecimate is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    axisStreamIn_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    axisStreamIn_TVALID : IN STD_LOGIC;
    axisStreamIn_TREADY : OUT STD_LOGIC;
    axisStreamIn_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    axisStreamIn_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    axisStreamIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    axisStreamOut_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    axisStreamOut_TVALID : OUT STD_LOGIC;
    axisStreamOut_TREADY : IN STD_LOGIC;
    axisStreamOut_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    axisStreamOut_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    axisStreamOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of StreamDecimate is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "StreamDecimate_StreamDecimate,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.039000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=282,HLS_SYN_LUT=348,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal axilConfig : STD_LOGIC_VECTOR (31 downto 0);
    signal regPacketCount_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal regSamplesDropped_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    signal axisStreamIn_TDATA_blk_n : STD_LOGIC;
    signal trunc_ln708_fu_135_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal axisStreamOut_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln708_reg_259 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_278 : STD_LOGIC_VECTOR (0 downto 0);
    signal axisData_reg_263 : STD_LOGIC_VECTOR (31 downto 0);
    signal axisData_1_reg_268 : STD_LOGIC_VECTOR (3 downto 0);
    signal axisData_2_reg_273 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln1057_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln870_1_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln870_1_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1061_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1061_reg_287 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1053_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1053_reg_292 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln68_fu_240_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln68_reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_regPacketCount_V_flag_2_phi_fu_109_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal regPacketCount_V_flag_2_reg_104 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_predicate_op46_write_state3 : BOOLEAN;
    signal regslice_both_axisStreamOut_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_phi_mux_regPacketCount_V_new_2_phi_fu_125_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal regPacketCount_V_new_2_reg_120 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln870_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_155_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln357_fu_165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_185_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln357_1_fu_195_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1061_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal regslice_both_axisStreamIn_V_data_V_U_apdone_blk : STD_LOGIC;
    signal axisStreamIn_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal axisStreamIn_TVALID_int_regslice : STD_LOGIC;
    signal axisStreamIn_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_axisStreamIn_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_axisStreamIn_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal axisStreamIn_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_axisStreamIn_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_axisStreamIn_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_axisStreamIn_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal axisStreamIn_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_axisStreamIn_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_axisStreamIn_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_axisStreamIn_V_last_V_U_apdone_blk : STD_LOGIC;
    signal axisStreamIn_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_axisStreamIn_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_axisStreamIn_V_last_V_U_ack_in : STD_LOGIC;
    signal axisStreamOut_TVALID_int_regslice : STD_LOGIC;
    signal axisStreamOut_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_axisStreamOut_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_axisStreamOut_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_axisStreamOut_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_axisStreamOut_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_axisStreamOut_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_axisStreamOut_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_axisStreamOut_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_axisStreamOut_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_axisStreamOut_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_axisStreamOut_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component StreamDecimate_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        axilConfig : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component StreamDecimate_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component StreamDecimate_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        axilConfig => axilConfig,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    regslice_both_axisStreamIn_V_data_V_U : component StreamDecimate_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => axisStreamIn_TDATA,
        vld_in => axisStreamIn_TVALID,
        ack_in => regslice_both_axisStreamIn_V_data_V_U_ack_in,
        data_out => axisStreamIn_TDATA_int_regslice,
        vld_out => axisStreamIn_TVALID_int_regslice,
        ack_out => axisStreamIn_TREADY_int_regslice,
        apdone_blk => regslice_both_axisStreamIn_V_data_V_U_apdone_blk);

    regslice_both_axisStreamIn_V_keep_V_U : component StreamDecimate_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => axisStreamIn_TKEEP,
        vld_in => axisStreamIn_TVALID,
        ack_in => regslice_both_axisStreamIn_V_keep_V_U_ack_in,
        data_out => axisStreamIn_TKEEP_int_regslice,
        vld_out => regslice_both_axisStreamIn_V_keep_V_U_vld_out,
        ack_out => axisStreamIn_TREADY_int_regslice,
        apdone_blk => regslice_both_axisStreamIn_V_keep_V_U_apdone_blk);

    regslice_both_axisStreamIn_V_strb_V_U : component StreamDecimate_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => axisStreamIn_TSTRB,
        vld_in => axisStreamIn_TVALID,
        ack_in => regslice_both_axisStreamIn_V_strb_V_U_ack_in,
        data_out => axisStreamIn_TSTRB_int_regslice,
        vld_out => regslice_both_axisStreamIn_V_strb_V_U_vld_out,
        ack_out => axisStreamIn_TREADY_int_regslice,
        apdone_blk => regslice_both_axisStreamIn_V_strb_V_U_apdone_blk);

    regslice_both_axisStreamIn_V_last_V_U : component StreamDecimate_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => axisStreamIn_TLAST,
        vld_in => axisStreamIn_TVALID,
        ack_in => regslice_both_axisStreamIn_V_last_V_U_ack_in,
        data_out => axisStreamIn_TLAST_int_regslice,
        vld_out => regslice_both_axisStreamIn_V_last_V_U_vld_out,
        ack_out => axisStreamIn_TREADY_int_regslice,
        apdone_blk => regslice_both_axisStreamIn_V_last_V_U_apdone_blk);

    regslice_both_axisStreamOut_V_data_V_U : component StreamDecimate_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => axisData_reg_263,
        vld_in => axisStreamOut_TVALID_int_regslice,
        ack_in => axisStreamOut_TREADY_int_regslice,
        data_out => axisStreamOut_TDATA,
        vld_out => regslice_both_axisStreamOut_V_data_V_U_vld_out,
        ack_out => axisStreamOut_TREADY,
        apdone_blk => regslice_both_axisStreamOut_V_data_V_U_apdone_blk);

    regslice_both_axisStreamOut_V_keep_V_U : component StreamDecimate_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => axisData_1_reg_268,
        vld_in => axisStreamOut_TVALID_int_regslice,
        ack_in => regslice_both_axisStreamOut_V_keep_V_U_ack_in_dummy,
        data_out => axisStreamOut_TKEEP,
        vld_out => regslice_both_axisStreamOut_V_keep_V_U_vld_out,
        ack_out => axisStreamOut_TREADY,
        apdone_blk => regslice_both_axisStreamOut_V_keep_V_U_apdone_blk);

    regslice_both_axisStreamOut_V_strb_V_U : component StreamDecimate_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => axisData_2_reg_273,
        vld_in => axisStreamOut_TVALID_int_regslice,
        ack_in => regslice_both_axisStreamOut_V_strb_V_U_ack_in_dummy,
        data_out => axisStreamOut_TSTRB,
        vld_out => regslice_both_axisStreamOut_V_strb_V_U_vld_out,
        ack_out => axisStreamOut_TREADY,
        apdone_blk => regslice_both_axisStreamOut_V_strb_V_U_apdone_blk);

    regslice_both_axisStreamOut_V_last_V_U : component StreamDecimate_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => tmp_3_fu_234_p2,
        vld_in => axisStreamOut_TVALID_int_regslice,
        ack_in => regslice_both_axisStreamOut_V_last_V_U_ack_in_dummy,
        data_out => axisStreamOut_TLAST,
        vld_out => regslice_both_axisStreamOut_V_last_V_U_vld_out,
        ack_out => axisStreamOut_TREADY,
        apdone_blk => regslice_both_axisStreamOut_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    regPacketCount_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                regPacketCount_V <= ap_const_lv32_0;
            else
                if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_axisStreamOut_V_data_V_U_apdone_blk = ap_const_logic_1) or ((axisStreamOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op46_write_state3 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_phi_mux_regPacketCount_V_flag_2_phi_fu_109_p6 = ap_const_lv1_1))) then 
                    regPacketCount_V <= ap_phi_mux_regPacketCount_V_new_2_phi_fu_125_p6;
                end if; 
            end if;
        end if;
    end process;


    regSamplesDropped_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                regSamplesDropped_V <= ap_const_lv32_1;
            else
                if ((not(((ap_start = ap_const_logic_0) or ((trunc_ln708_fu_135_p1 = ap_const_lv1_0) and (axisStreamIn_TVALID_int_regslice = ap_const_logic_0)))) and (icmp_ln1057_fu_173_p2 = ap_const_lv1_1) and (trunc_ln708_fu_135_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    regSamplesDropped_V <= add_ln870_fu_211_p2;
                elsif (((not(((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_axisStreamOut_V_data_V_U_apdone_blk = ap_const_logic_1) or ((axisStreamOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op46_write_state3 = ap_const_boolean_1)))) and (icmp_ln1057_reg_278 = ap_const_lv1_0) and (trunc_ln708_reg_259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((ap_start = ap_const_logic_0) or ((trunc_ln708_fu_135_p1 = ap_const_lv1_0) and (axisStreamIn_TVALID_int_regslice = ap_const_logic_0)))) and (trunc_ln708_fu_135_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    regSamplesDropped_V <= ap_const_lv32_1;
                end if; 
            end if;
        end if;
    end process;


    regPacketCount_V_flag_2_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or ((trunc_ln708_fu_135_p1 = ap_const_lv1_0) and (axisStreamIn_TVALID_int_regslice = ap_const_logic_0)))) and (icmp_ln1057_fu_173_p2 = ap_const_lv1_1) and (trunc_ln708_fu_135_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                regPacketCount_V_flag_2_reg_104 <= ap_const_lv1_0;
            elsif (((not(((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_axisStreamOut_V_data_V_U_apdone_blk = ap_const_logic_1) or ((axisStreamOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op46_write_state3 = ap_const_boolean_1)))) and (icmp_ln1057_reg_278 = ap_const_lv1_0) and (trunc_ln708_reg_259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((ap_start = ap_const_logic_0) or ((trunc_ln708_fu_135_p1 = ap_const_lv1_0) and (axisStreamIn_TVALID_int_regslice = ap_const_logic_0)))) and (trunc_ln708_fu_135_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                regPacketCount_V_flag_2_reg_104 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    regPacketCount_V_new_2_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_axisStreamOut_V_data_V_U_apdone_blk = ap_const_logic_1) or ((axisStreamOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op46_write_state3 = ap_const_boolean_1)))) and (icmp_ln1057_reg_278 = ap_const_lv1_0) and (trunc_ln708_reg_259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                regPacketCount_V_new_2_reg_120 <= select_ln68_reg_302;
            elsif ((not(((ap_start = ap_const_logic_0) or ((trunc_ln708_fu_135_p1 = ap_const_lv1_0) and (axisStreamIn_TVALID_int_regslice = ap_const_logic_0)))) and (trunc_ln708_fu_135_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                regPacketCount_V_new_2_reg_120 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_fu_173_p2 = ap_const_lv1_0) and (trunc_ln708_fu_135_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln870_1_reg_282 <= add_ln870_1_fu_179_p2;
                icmp_ln1053_reg_292 <= icmp_ln1053_fu_205_p2;
                icmp_ln1061_reg_287 <= icmp_ln1061_fu_199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((trunc_ln708_fu_135_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                axisData_1_reg_268 <= axisStreamIn_TKEEP_int_regslice;
                axisData_2_reg_273 <= axisStreamIn_TSTRB_int_regslice;
                axisData_reg_263 <= axisStreamIn_TDATA_int_regslice;
                icmp_ln1057_reg_278 <= icmp_ln1057_fu_173_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                select_ln68_reg_302 <= select_ln68_fu_240_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                trunc_ln708_reg_259 <= trunc_ln708_fu_135_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, trunc_ln708_fu_135_p1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln1057_fu_173_p2, ap_predicate_op46_write_state3, regslice_both_axisStreamOut_V_data_V_U_apdone_blk, ap_block_state3_io, axisStreamIn_TVALID_int_regslice, axisStreamOut_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or ((trunc_ln708_fu_135_p1 = ap_const_lv1_0) and (axisStreamIn_TVALID_int_regslice = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1) and ((icmp_ln1057_fu_173_p2 = ap_const_lv1_1) or (trunc_ln708_fu_135_p1 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((ap_start = ap_const_logic_0) or ((trunc_ln708_fu_135_p1 = ap_const_lv1_0) and (axisStreamIn_TVALID_int_regslice = ap_const_logic_0)))) and (icmp_ln1057_fu_173_p2 = ap_const_lv1_0) and (trunc_ln708_fu_135_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((axisStreamOut_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_axisStreamOut_V_data_V_U_apdone_blk = ap_const_logic_1) or ((axisStreamOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op46_write_state3 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln870_1_fu_179_p2 <= std_logic_vector(unsigned(regPacketCount_V) + unsigned(ap_const_lv32_1));
    add_ln870_fu_211_p2 <= std_logic_vector(unsigned(regSamplesDropped_V) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, trunc_ln708_fu_135_p1, axisStreamIn_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_0) or ((trunc_ln708_fu_135_p1 = ap_const_lv1_0) and (axisStreamIn_TVALID_int_regslice = ap_const_logic_0)))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(axisStreamOut_TREADY_int_regslice)
    begin
        if ((axisStreamOut_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_predicate_op46_write_state3, regslice_both_axisStreamOut_V_data_V_U_apdone_blk, ap_block_state3_io, axisStreamOut_TREADY_int_regslice)
    begin
        if (((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_axisStreamOut_V_data_V_U_apdone_blk = ap_const_logic_1) or ((axisStreamOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op46_write_state3 = ap_const_boolean_1)))) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, trunc_ln708_fu_135_p1, axisStreamIn_TVALID_int_regslice)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or ((trunc_ln708_fu_135_p1 = ap_const_lv1_0) and (axisStreamIn_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state3_assign_proc : process(ap_predicate_op46_write_state3, regslice_both_axisStreamOut_V_data_V_U_apdone_blk, axisStreamOut_TREADY_int_regslice)
    begin
                ap_block_state3 <= ((regslice_both_axisStreamOut_V_data_V_U_apdone_blk = ap_const_logic_1) or ((axisStreamOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op46_write_state3 = ap_const_boolean_1)));
    end process;


    ap_block_state3_io_assign_proc : process(ap_predicate_op46_write_state3, axisStreamOut_TREADY_int_regslice)
    begin
                ap_block_state3_io <= ((axisStreamOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op46_write_state3 = ap_const_boolean_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state3, ap_predicate_op46_write_state3, regslice_both_axisStreamOut_V_data_V_U_apdone_blk, ap_block_state3_io, axisStreamOut_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_axisStreamOut_V_data_V_U_apdone_blk = ap_const_logic_1) or ((axisStreamOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op46_write_state3 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_regPacketCount_V_flag_2_phi_fu_109_p6_assign_proc : process(ap_CS_fsm_state3, trunc_ln708_reg_259, icmp_ln1057_reg_278, regPacketCount_V_flag_2_reg_104)
    begin
        if (((icmp_ln1057_reg_278 = ap_const_lv1_0) and (trunc_ln708_reg_259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_phi_mux_regPacketCount_V_flag_2_phi_fu_109_p6 <= ap_const_lv1_1;
        else 
            ap_phi_mux_regPacketCount_V_flag_2_phi_fu_109_p6 <= regPacketCount_V_flag_2_reg_104;
        end if; 
    end process;


    ap_phi_mux_regPacketCount_V_new_2_phi_fu_125_p6_assign_proc : process(ap_CS_fsm_state3, trunc_ln708_reg_259, icmp_ln1057_reg_278, select_ln68_reg_302, regPacketCount_V_new_2_reg_120)
    begin
        if (((icmp_ln1057_reg_278 = ap_const_lv1_0) and (trunc_ln708_reg_259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_phi_mux_regPacketCount_V_new_2_phi_fu_125_p6 <= select_ln68_reg_302;
        else 
            ap_phi_mux_regPacketCount_V_new_2_phi_fu_125_p6 <= regPacketCount_V_new_2_reg_120;
        end if; 
    end process;


    ap_predicate_op46_write_state3_assign_proc : process(trunc_ln708_reg_259, icmp_ln1057_reg_278)
    begin
                ap_predicate_op46_write_state3 <= ((icmp_ln1057_reg_278 = ap_const_lv1_0) and (trunc_ln708_reg_259 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, ap_predicate_op46_write_state3, regslice_both_axisStreamOut_V_data_V_U_apdone_blk, ap_block_state3_io, axisStreamOut_TREADY_int_regslice)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_axisStreamOut_V_data_V_U_apdone_blk = ap_const_logic_1) or ((axisStreamOut_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op46_write_state3 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    axisStreamIn_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, trunc_ln708_fu_135_p1, axisStreamIn_TVALID_int_regslice)
    begin
        if (((trunc_ln708_fu_135_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            axisStreamIn_TDATA_blk_n <= axisStreamIn_TVALID_int_regslice;
        else 
            axisStreamIn_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axisStreamIn_TREADY <= regslice_both_axisStreamIn_V_data_V_U_ack_in;

    axisStreamIn_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_state1, trunc_ln708_fu_135_p1, axisStreamIn_TVALID_int_regslice)
    begin
        if ((not(((ap_start = ap_const_logic_0) or ((trunc_ln708_fu_135_p1 = ap_const_lv1_0) and (axisStreamIn_TVALID_int_regslice = ap_const_logic_0)))) and (trunc_ln708_fu_135_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            axisStreamIn_TREADY_int_regslice <= ap_const_logic_1;
        else 
            axisStreamIn_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    axisStreamOut_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, trunc_ln708_reg_259, icmp_ln1057_reg_278, axisStreamOut_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln1057_reg_278 = ap_const_lv1_0) and (trunc_ln708_reg_259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            axisStreamOut_TDATA_blk_n <= axisStreamOut_TREADY_int_regslice;
        else 
            axisStreamOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axisStreamOut_TVALID <= regslice_both_axisStreamOut_V_data_V_U_vld_out;

    axisStreamOut_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state2, axisStreamOut_TREADY_int_regslice)
    begin
        if (((axisStreamOut_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            axisStreamOut_TVALID_int_regslice <= ap_const_logic_1;
        else 
            axisStreamOut_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1053_fu_205_p2 <= "0" when (p_Result_1_fu_185_p4 = ap_const_lv15_0) else "1";
    icmp_ln1057_fu_173_p2 <= "1" when (unsigned(regSamplesDropped_V) < unsigned(zext_ln357_fu_165_p1)) else "0";
    icmp_ln1061_fu_199_p2 <= "1" when (unsigned(add_ln870_1_fu_179_p2) < unsigned(zext_ln357_1_fu_195_p1)) else "0";
    p_Result_1_fu_185_p4 <= axilConfig(15 downto 1);
    p_Result_s_fu_155_p4 <= axilConfig(31 downto 16);
    select_ln68_fu_240_p3 <= 
        ap_const_lv32_0 when (tmp_3_fu_234_p2(0) = '1') else 
        add_ln870_1_reg_282;
    tmp_3_fu_234_p2 <= (xor_ln1061_fu_229_p2 and icmp_ln1053_reg_292);
    trunc_ln708_fu_135_p1 <= axilConfig(1 - 1 downto 0);
    xor_ln1061_fu_229_p2 <= (icmp_ln1061_reg_287 xor ap_const_lv1_1);
    zext_ln357_1_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_185_p4),32));
    zext_ln357_fu_165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_155_p4),32));
end behav;
