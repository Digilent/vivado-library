// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="StreamDecimate_StreamDecimate,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.039000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=282,HLS_SYN_LUT=348,HLS_VERSION=2021_1}" *)

module StreamDecimate (
// synthesis translate_off
    kernel_block,
// synthesis translate_on
        ap_clk,
        ap_rst_n,
        axisStreamIn_TDATA,
        axisStreamIn_TVALID,
        axisStreamIn_TREADY,
        axisStreamIn_TKEEP,
        axisStreamIn_TSTRB,
        axisStreamIn_TLAST,
        axisStreamOut_TDATA,
        axisStreamOut_TVALID,
        axisStreamOut_TREADY,
        axisStreamOut_TKEEP,
        axisStreamOut_TSTRB,
        axisStreamOut_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

// synthesis translate_off
output kernel_block;
// synthesis translate_on
input   ap_clk;
input   ap_rst_n;
input  [31:0] axisStreamIn_TDATA;
input   axisStreamIn_TVALID;
output   axisStreamIn_TREADY;
input  [3:0] axisStreamIn_TKEEP;
input  [3:0] axisStreamIn_TSTRB;
input  [0:0] axisStreamIn_TLAST;
output  [31:0] axisStreamOut_TDATA;
output   axisStreamOut_TVALID;
input   axisStreamOut_TREADY;
output  [3:0] axisStreamOut_TKEEP;
output  [3:0] axisStreamOut_TSTRB;
output  [0:0] axisStreamOut_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] axilConfig;
reg   [31:0] regPacketCount_V;
reg   [31:0] regSamplesDropped_V;
reg    axisStreamIn_TDATA_blk_n;
wire   [0:0] trunc_ln708_fu_135_p1;
reg    axisStreamOut_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [0:0] trunc_ln708_reg_259;
reg   [0:0] icmp_ln1057_reg_278;
reg   [31:0] axisData_reg_263;
reg   [3:0] axisData_1_reg_268;
reg   [3:0] axisData_2_reg_273;
wire   [0:0] icmp_ln1057_fu_173_p2;
wire   [31:0] add_ln870_1_fu_179_p2;
reg   [31:0] add_ln870_1_reg_282;
wire   [0:0] icmp_ln1061_fu_199_p2;
reg   [0:0] icmp_ln1061_reg_287;
wire   [0:0] icmp_ln1053_fu_205_p2;
reg   [0:0] icmp_ln1053_reg_292;
wire   [0:0] tmp_3_fu_234_p2;
wire   [31:0] select_ln68_fu_240_p3;
reg   [31:0] select_ln68_reg_302;
reg   [0:0] ap_phi_mux_regPacketCount_V_flag_2_phi_fu_109_p6;
reg   [0:0] regPacketCount_V_flag_2_reg_104;
reg    ap_block_state1;
reg    ap_predicate_op46_write_state3;
wire    regslice_both_axisStreamOut_V_data_V_U_apdone_blk;
reg    ap_block_state3;
reg    ap_block_state3_io;
reg   [31:0] ap_phi_mux_regPacketCount_V_new_2_phi_fu_125_p6;
reg   [31:0] regPacketCount_V_new_2_reg_120;
wire   [31:0] add_ln870_fu_211_p2;
wire   [15:0] p_Result_s_fu_155_p4;
wire   [31:0] zext_ln357_fu_165_p1;
wire   [14:0] p_Result_1_fu_185_p4;
wire   [31:0] zext_ln357_1_fu_195_p1;
wire   [0:0] xor_ln1061_fu_229_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    regslice_both_axisStreamIn_V_data_V_U_apdone_blk;
wire   [31:0] axisStreamIn_TDATA_int_regslice;
wire    axisStreamIn_TVALID_int_regslice;
reg    axisStreamIn_TREADY_int_regslice;
wire    regslice_both_axisStreamIn_V_data_V_U_ack_in;
wire    regslice_both_axisStreamIn_V_keep_V_U_apdone_blk;
wire   [3:0] axisStreamIn_TKEEP_int_regslice;
wire    regslice_both_axisStreamIn_V_keep_V_U_vld_out;
wire    regslice_both_axisStreamIn_V_keep_V_U_ack_in;
wire    regslice_both_axisStreamIn_V_strb_V_U_apdone_blk;
wire   [3:0] axisStreamIn_TSTRB_int_regslice;
wire    regslice_both_axisStreamIn_V_strb_V_U_vld_out;
wire    regslice_both_axisStreamIn_V_strb_V_U_ack_in;
wire    regslice_both_axisStreamIn_V_last_V_U_apdone_blk;
wire   [0:0] axisStreamIn_TLAST_int_regslice;
wire    regslice_both_axisStreamIn_V_last_V_U_vld_out;
wire    regslice_both_axisStreamIn_V_last_V_U_ack_in;
reg    axisStreamOut_TVALID_int_regslice;
wire    axisStreamOut_TREADY_int_regslice;
wire    regslice_both_axisStreamOut_V_data_V_U_vld_out;
wire    regslice_both_axisStreamOut_V_keep_V_U_apdone_blk;
wire    regslice_both_axisStreamOut_V_keep_V_U_ack_in_dummy;
wire    regslice_both_axisStreamOut_V_keep_V_U_vld_out;
wire    regslice_both_axisStreamOut_V_strb_V_U_apdone_blk;
wire    regslice_both_axisStreamOut_V_strb_V_U_ack_in_dummy;
wire    regslice_both_axisStreamOut_V_strb_V_U_vld_out;
wire    regslice_both_axisStreamOut_V_last_V_U_apdone_blk;
wire    regslice_both_axisStreamOut_V_last_V_U_ack_in_dummy;
wire    regslice_both_axisStreamOut_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 regPacketCount_V = 32'd0;
#0 regSamplesDropped_V = 32'd1;
end

StreamDecimate_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .axilConfig(axilConfig),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

StreamDecimate_regslice_both #(
    .DataWidth( 32 ))
regslice_both_axisStreamIn_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(axisStreamIn_TDATA),
    .vld_in(axisStreamIn_TVALID),
    .ack_in(regslice_both_axisStreamIn_V_data_V_U_ack_in),
    .data_out(axisStreamIn_TDATA_int_regslice),
    .vld_out(axisStreamIn_TVALID_int_regslice),
    .ack_out(axisStreamIn_TREADY_int_regslice),
    .apdone_blk(regslice_both_axisStreamIn_V_data_V_U_apdone_blk)
);

StreamDecimate_regslice_both #(
    .DataWidth( 4 ))
regslice_both_axisStreamIn_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(axisStreamIn_TKEEP),
    .vld_in(axisStreamIn_TVALID),
    .ack_in(regslice_both_axisStreamIn_V_keep_V_U_ack_in),
    .data_out(axisStreamIn_TKEEP_int_regslice),
    .vld_out(regslice_both_axisStreamIn_V_keep_V_U_vld_out),
    .ack_out(axisStreamIn_TREADY_int_regslice),
    .apdone_blk(regslice_both_axisStreamIn_V_keep_V_U_apdone_blk)
);

StreamDecimate_regslice_both #(
    .DataWidth( 4 ))
regslice_both_axisStreamIn_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(axisStreamIn_TSTRB),
    .vld_in(axisStreamIn_TVALID),
    .ack_in(regslice_both_axisStreamIn_V_strb_V_U_ack_in),
    .data_out(axisStreamIn_TSTRB_int_regslice),
    .vld_out(regslice_both_axisStreamIn_V_strb_V_U_vld_out),
    .ack_out(axisStreamIn_TREADY_int_regslice),
    .apdone_blk(regslice_both_axisStreamIn_V_strb_V_U_apdone_blk)
);

StreamDecimate_regslice_both #(
    .DataWidth( 1 ))
regslice_both_axisStreamIn_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(axisStreamIn_TLAST),
    .vld_in(axisStreamIn_TVALID),
    .ack_in(regslice_both_axisStreamIn_V_last_V_U_ack_in),
    .data_out(axisStreamIn_TLAST_int_regslice),
    .vld_out(regslice_both_axisStreamIn_V_last_V_U_vld_out),
    .ack_out(axisStreamIn_TREADY_int_regslice),
    .apdone_blk(regslice_both_axisStreamIn_V_last_V_U_apdone_blk)
);

StreamDecimate_regslice_both #(
    .DataWidth( 32 ))
regslice_both_axisStreamOut_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(axisData_reg_263),
    .vld_in(axisStreamOut_TVALID_int_regslice),
    .ack_in(axisStreamOut_TREADY_int_regslice),
    .data_out(axisStreamOut_TDATA),
    .vld_out(regslice_both_axisStreamOut_V_data_V_U_vld_out),
    .ack_out(axisStreamOut_TREADY),
    .apdone_blk(regslice_both_axisStreamOut_V_data_V_U_apdone_blk)
);

StreamDecimate_regslice_both #(
    .DataWidth( 4 ))
regslice_both_axisStreamOut_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(axisData_1_reg_268),
    .vld_in(axisStreamOut_TVALID_int_regslice),
    .ack_in(regslice_both_axisStreamOut_V_keep_V_U_ack_in_dummy),
    .data_out(axisStreamOut_TKEEP),
    .vld_out(regslice_both_axisStreamOut_V_keep_V_U_vld_out),
    .ack_out(axisStreamOut_TREADY),
    .apdone_blk(regslice_both_axisStreamOut_V_keep_V_U_apdone_blk)
);

StreamDecimate_regslice_both #(
    .DataWidth( 4 ))
regslice_both_axisStreamOut_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(axisData_2_reg_273),
    .vld_in(axisStreamOut_TVALID_int_regslice),
    .ack_in(regslice_both_axisStreamOut_V_strb_V_U_ack_in_dummy),
    .data_out(axisStreamOut_TSTRB),
    .vld_out(regslice_both_axisStreamOut_V_strb_V_U_vld_out),
    .ack_out(axisStreamOut_TREADY),
    .apdone_blk(regslice_both_axisStreamOut_V_strb_V_U_apdone_blk)
);

StreamDecimate_regslice_both #(
    .DataWidth( 1 ))
regslice_both_axisStreamOut_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_3_fu_234_p2),
    .vld_in(axisStreamOut_TVALID_int_regslice),
    .ack_in(regslice_both_axisStreamOut_V_last_V_U_ack_in_dummy),
    .data_out(axisStreamOut_TLAST),
    .vld_out(regslice_both_axisStreamOut_V_last_V_U_vld_out),
    .ack_out(axisStreamOut_TREADY),
    .apdone_blk(regslice_both_axisStreamOut_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        regPacketCount_V <= 32'd0;
    end else begin
        if ((~((1'b1 == ap_block_state3_io) | (regslice_both_axisStreamOut_V_data_V_U_apdone_blk == 1'b1) | ((axisStreamOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op46_write_state3 == 1'b1))) & (1'b1 == ap_CS_fsm_state3) & (ap_phi_mux_regPacketCount_V_flag_2_phi_fu_109_p6 == 1'd1))) begin
            regPacketCount_V <= ap_phi_mux_regPacketCount_V_new_2_phi_fu_125_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        regSamplesDropped_V <= 32'd1;
    end else begin
        if ((~((ap_start == 1'b0) | ((trunc_ln708_fu_135_p1 == 1'd0) & (axisStreamIn_TVALID_int_regslice == 1'b0))) & (icmp_ln1057_fu_173_p2 == 1'd1) & (trunc_ln708_fu_135_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            regSamplesDropped_V <= add_ln870_fu_211_p2;
        end else if (((~((1'b1 == ap_block_state3_io) | (regslice_both_axisStreamOut_V_data_V_U_apdone_blk == 1'b1) | ((axisStreamOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op46_write_state3 == 1'b1))) & (icmp_ln1057_reg_278 == 1'd0) & (trunc_ln708_reg_259 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | (~((ap_start == 1'b0) | ((trunc_ln708_fu_135_p1 == 1'd0) & (axisStreamIn_TVALID_int_regslice == 1'b0))) & (trunc_ln708_fu_135_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
            regSamplesDropped_V <= 32'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | ((trunc_ln708_fu_135_p1 == 1'd0) & (axisStreamIn_TVALID_int_regslice == 1'b0))) & (icmp_ln1057_fu_173_p2 == 1'd1) & (trunc_ln708_fu_135_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        regPacketCount_V_flag_2_reg_104 <= 1'd0;
    end else if (((~((1'b1 == ap_block_state3_io) | (regslice_both_axisStreamOut_V_data_V_U_apdone_blk == 1'b1) | ((axisStreamOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op46_write_state3 == 1'b1))) & (icmp_ln1057_reg_278 == 1'd0) & (trunc_ln708_reg_259 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | (~((ap_start == 1'b0) | ((trunc_ln708_fu_135_p1 == 1'd0) & (axisStreamIn_TVALID_int_regslice == 1'b0))) & (trunc_ln708_fu_135_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        regPacketCount_V_flag_2_reg_104 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state3_io) | (regslice_both_axisStreamOut_V_data_V_U_apdone_blk == 1'b1) | ((axisStreamOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op46_write_state3 == 1'b1))) & (icmp_ln1057_reg_278 == 1'd0) & (trunc_ln708_reg_259 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        regPacketCount_V_new_2_reg_120 <= select_ln68_reg_302;
    end else if ((~((ap_start == 1'b0) | ((trunc_ln708_fu_135_p1 == 1'd0) & (axisStreamIn_TVALID_int_regslice == 1'b0))) & (trunc_ln708_fu_135_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        regPacketCount_V_new_2_reg_120 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1057_fu_173_p2 == 1'd0) & (trunc_ln708_fu_135_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln870_1_reg_282 <= add_ln870_1_fu_179_p2;
        icmp_ln1053_reg_292 <= icmp_ln1053_fu_205_p2;
        icmp_ln1061_reg_287 <= icmp_ln1061_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((trunc_ln708_fu_135_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        axisData_1_reg_268 <= axisStreamIn_TKEEP_int_regslice;
        axisData_2_reg_273 <= axisStreamIn_TSTRB_int_regslice;
        axisData_reg_263 <= axisStreamIn_TDATA_int_regslice;
        icmp_ln1057_reg_278 <= icmp_ln1057_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        select_ln68_reg_302 <= select_ln68_fu_240_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln708_reg_259 <= trunc_ln708_fu_135_p1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | ((trunc_ln708_fu_135_p1 == 1'd0) & (axisStreamIn_TVALID_int_regslice == 1'b0)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((axisStreamOut_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_block_state3_io) | (regslice_both_axisStreamOut_V_data_V_U_apdone_blk == 1'b1) | ((axisStreamOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op46_write_state3 == 1'b1)))) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state3_io) | (regslice_both_axisStreamOut_V_data_V_U_apdone_blk == 1'b1) | ((axisStreamOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op46_write_state3 == 1'b1))) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1057_reg_278 == 1'd0) & (trunc_ln708_reg_259 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_phi_mux_regPacketCount_V_flag_2_phi_fu_109_p6 = 1'd1;
    end else begin
        ap_phi_mux_regPacketCount_V_flag_2_phi_fu_109_p6 = regPacketCount_V_flag_2_reg_104;
    end
end

always @ (*) begin
    if (((icmp_ln1057_reg_278 == 1'd0) & (trunc_ln708_reg_259 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_phi_mux_regPacketCount_V_new_2_phi_fu_125_p6 = select_ln68_reg_302;
    end else begin
        ap_phi_mux_regPacketCount_V_new_2_phi_fu_125_p6 = regPacketCount_V_new_2_reg_120;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state3_io) | (regslice_both_axisStreamOut_V_data_V_U_apdone_blk == 1'b1) | ((axisStreamOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op46_write_state3 == 1'b1))) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln708_fu_135_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        axisStreamIn_TDATA_blk_n = axisStreamIn_TVALID_int_regslice;
    end else begin
        axisStreamIn_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | ((trunc_ln708_fu_135_p1 == 1'd0) & (axisStreamIn_TVALID_int_regslice == 1'b0))) & (trunc_ln708_fu_135_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        axisStreamIn_TREADY_int_regslice = 1'b1;
    end else begin
        axisStreamIn_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln1057_reg_278 == 1'd0) & (trunc_ln708_reg_259 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        axisStreamOut_TDATA_blk_n = axisStreamOut_TREADY_int_regslice;
    end else begin
        axisStreamOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((axisStreamOut_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        axisStreamOut_TVALID_int_regslice = 1'b1;
    end else begin
        axisStreamOut_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | ((trunc_ln708_fu_135_p1 == 1'd0) & (axisStreamIn_TVALID_int_regslice == 1'b0))) & (1'b1 == ap_CS_fsm_state1) & ((icmp_ln1057_fu_173_p2 == 1'd1) | (trunc_ln708_fu_135_p1 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((ap_start == 1'b0) | ((trunc_ln708_fu_135_p1 == 1'd0) & (axisStreamIn_TVALID_int_regslice == 1'b0))) & (icmp_ln1057_fu_173_p2 == 1'd0) & (trunc_ln708_fu_135_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((axisStreamOut_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b1 == ap_block_state3_io) | (regslice_both_axisStreamOut_V_data_V_U_apdone_blk == 1'b1) | ((axisStreamOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op46_write_state3 == 1'b1))) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln870_1_fu_179_p2 = (regPacketCount_V + 32'd1);

assign add_ln870_fu_211_p2 = (regSamplesDropped_V + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | ((trunc_ln708_fu_135_p1 == 1'd0) & (axisStreamIn_TVALID_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3 = ((regslice_both_axisStreamOut_V_data_V_U_apdone_blk == 1'b1) | ((axisStreamOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op46_write_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state3_io = ((axisStreamOut_TREADY_int_regslice == 1'b0) & (ap_predicate_op46_write_state3 == 1'b1));
end

always @ (*) begin
    ap_predicate_op46_write_state3 = ((icmp_ln1057_reg_278 == 1'd0) & (trunc_ln708_reg_259 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign axisStreamIn_TREADY = regslice_both_axisStreamIn_V_data_V_U_ack_in;

assign axisStreamOut_TVALID = regslice_both_axisStreamOut_V_data_V_U_vld_out;

assign icmp_ln1053_fu_205_p2 = ((p_Result_1_fu_185_p4 != 15'd0) ? 1'b1 : 1'b0);

assign icmp_ln1057_fu_173_p2 = ((regSamplesDropped_V < zext_ln357_fu_165_p1) ? 1'b1 : 1'b0);

assign icmp_ln1061_fu_199_p2 = ((add_ln870_1_fu_179_p2 < zext_ln357_1_fu_195_p1) ? 1'b1 : 1'b0);

assign p_Result_1_fu_185_p4 = {{axilConfig[15:1]}};

assign p_Result_s_fu_155_p4 = {{axilConfig[31:16]}};

assign select_ln68_fu_240_p3 = ((tmp_3_fu_234_p2[0:0] == 1'b1) ? 32'd0 : add_ln870_1_reg_282);

assign tmp_3_fu_234_p2 = (xor_ln1061_fu_229_p2 & icmp_ln1053_reg_292);

assign trunc_ln708_fu_135_p1 = axilConfig[0:0];

assign xor_ln1061_fu_229_p2 = (icmp_ln1061_reg_287 ^ 1'd1);

assign zext_ln357_1_fu_195_p1 = p_Result_1_fu_185_p4;

assign zext_ln357_fu_165_p1 = p_Result_s_fu_155_p4;


// synthesis translate_off
`include "StreamDecimate_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //StreamDecimate

