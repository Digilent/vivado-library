-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ack_gen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    inLoad : IN STD_LOGIC_VECTOR (0 downto 0);
    inReq : IN STD_LOGIC_VECTOR (0 downto 0);
    outAck : OUT STD_LOGIC_VECTOR (0 downto 0);
    outValid : OUT STD_LOGIC_VECTOR (0 downto 0);
    outLoadData : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of ack_gen is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ack_gen_ack_gen,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.544000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=6,HLS_SYN_LUT=6,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal reqD_V_2 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal reqD_V_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal currentState : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ackD_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal reqD_V_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal valid_V_load_fu_91_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_3_fu_85_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inLoad_read_read_fu_50_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_4_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    currentState_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if (((inLoad_read_read_fu_50_p2 = ap_const_lv1_1) and (valid_V_load_fu_91_p1 = ap_const_lv1_1))) then 
                    currentState <= ap_const_lv1_0;
                elsif (((ret_3_fu_85_p2 = ap_const_lv1_1) and (valid_V_load_fu_91_p1 = ap_const_lv1_0))) then 
                    currentState <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                ackD_V <= ret_fu_142_p2;
                reqD_V_0 <= inReq;
                reqD_V_1 <= reqD_V_0;
                reqD_V_2 <= reqD_V_1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    inLoad_read_read_fu_50_p2 <= inLoad;
    outAck <= ackD_V;
    outLoadData <= ret_4_fu_108_p2;
    outValid <= currentState;
    ret_3_fu_85_p2 <= (reqD_V_2 xor reqD_V_1);
    ret_4_fu_108_p2 <= (inLoad and currentState);
    ret_fu_142_p2 <= (ret_4_fu_108_p2 xor ackD_V);
    valid_V_load_fu_91_p1 <= currentState;
end behav;
