-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ZmodAwgAxiConfiguration is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    DacEnable : OUT STD_LOGIC_VECTOR (0 downto 0);
    TestMode : OUT STD_LOGIC_VECTOR (0 downto 0);
    ExtCh1Scale : OUT STD_LOGIC_VECTOR (0 downto 0);
    ExtCh2Scale : OUT STD_LOGIC_VECTOR (0 downto 0);
    InitDoneDAC : IN STD_LOGIC_VECTOR (0 downto 0);
    ConfigError : IN STD_LOGIC_VECTOR (0 downto 0);
    ExtCh1HgMultCoef : OUT STD_LOGIC_VECTOR (17 downto 0);
    ExtCh1HgAddCoef : OUT STD_LOGIC_VECTOR (17 downto 0);
    ExtCh1LgMultCoef : OUT STD_LOGIC_VECTOR (17 downto 0);
    ExtCh1LgAddCoef : OUT STD_LOGIC_VECTOR (17 downto 0);
    ExtCh2HgMultCoef : OUT STD_LOGIC_VECTOR (17 downto 0);
    ExtCh2HgAddCoef : OUT STD_LOGIC_VECTOR (17 downto 0);
    ExtCh2LgMultCoef : OUT STD_LOGIC_VECTOR (17 downto 0);
    ExtCh2LgAddCoef : OUT STD_LOGIC_VECTOR (17 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of ZmodAwgAxiConfiguration is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ZmodAwgAxiConfiguration_ZmodAwgAxiConfiguration,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=398,HLS_SYN_LUT=356,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal ControlAxil : STD_LOGIC_VECTOR (3 downto 0);
    signal StatusAxil : STD_LOGIC_VECTOR (1 downto 0);
    signal ExtCh1HgMultCoefAxil : STD_LOGIC_VECTOR (17 downto 0);
    signal ExtCh1HgAddCoefAxil : STD_LOGIC_VECTOR (17 downto 0);
    signal ExtCh1LgMultCoefAxil : STD_LOGIC_VECTOR (17 downto 0);
    signal ExtCh1LgAddCoefAxil : STD_LOGIC_VECTOR (17 downto 0);
    signal ExtCh2HgMultCoefAxil : STD_LOGIC_VECTOR (17 downto 0);
    signal ExtCh2HgAddCoefAxil : STD_LOGIC_VECTOR (17 downto 0);
    signal ExtCh2LgMultCoefAxil : STD_LOGIC_VECTOR (17 downto 0);
    signal ExtCh2LgAddCoefAxil : STD_LOGIC_VECTOR (17 downto 0);
    signal DacEnable_1_data_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal DacEnable_1_vld_reg : STD_LOGIC := '0';
    signal DacEnable_1_vld_in : STD_LOGIC;
    signal DacEnable_1_ack_in : STD_LOGIC;
    signal TestMode_1_data_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal TestMode_1_vld_reg : STD_LOGIC := '0';
    signal TestMode_1_vld_in : STD_LOGIC;
    signal TestMode_1_ack_in : STD_LOGIC;
    signal ExtCh1Scale_1_data_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ExtCh1Scale_1_vld_reg : STD_LOGIC := '0';
    signal ExtCh1Scale_1_vld_in : STD_LOGIC;
    signal ExtCh1Scale_1_ack_in : STD_LOGIC;
    signal ExtCh2Scale_1_data_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ExtCh2Scale_1_vld_reg : STD_LOGIC := '0';
    signal ExtCh2Scale_1_vld_in : STD_LOGIC;
    signal ExtCh2Scale_1_ack_in : STD_LOGIC;
    signal InitDoneDAC_0_data_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal InitDoneDAC_0_vld_reg : STD_LOGIC := '0';
    signal InitDoneDAC_0_ack_out : STD_LOGIC;
    signal ConfigError_0_data_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ConfigError_0_vld_reg : STD_LOGIC := '0';
    signal ConfigError_0_ack_out : STD_LOGIC;
    signal ExtCh1HgMultCoef_1_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal ExtCh1HgMultCoef_1_vld_reg : STD_LOGIC := '0';
    signal ExtCh1HgMultCoef_1_vld_in : STD_LOGIC;
    signal ExtCh1HgMultCoef_1_ack_in : STD_LOGIC;
    signal ExtCh1HgAddCoef_1_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal ExtCh1HgAddCoef_1_vld_reg : STD_LOGIC := '0';
    signal ExtCh1HgAddCoef_1_vld_in : STD_LOGIC;
    signal ExtCh1HgAddCoef_1_ack_in : STD_LOGIC;
    signal ExtCh1LgMultCoef_1_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal ExtCh1LgMultCoef_1_vld_reg : STD_LOGIC := '0';
    signal ExtCh1LgMultCoef_1_vld_in : STD_LOGIC;
    signal ExtCh1LgMultCoef_1_ack_in : STD_LOGIC;
    signal ExtCh1LgAddCoef_1_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal ExtCh1LgAddCoef_1_vld_reg : STD_LOGIC := '0';
    signal ExtCh1LgAddCoef_1_vld_in : STD_LOGIC;
    signal ExtCh1LgAddCoef_1_ack_in : STD_LOGIC;
    signal ExtCh2HgMultCoef_1_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal ExtCh2HgMultCoef_1_vld_reg : STD_LOGIC := '0';
    signal ExtCh2HgMultCoef_1_vld_in : STD_LOGIC;
    signal ExtCh2HgMultCoef_1_ack_in : STD_LOGIC;
    signal ExtCh2HgAddCoef_1_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal ExtCh2HgAddCoef_1_vld_reg : STD_LOGIC := '0';
    signal ExtCh2HgAddCoef_1_vld_in : STD_LOGIC;
    signal ExtCh2HgAddCoef_1_ack_in : STD_LOGIC;
    signal ExtCh2LgMultCoef_1_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal ExtCh2LgMultCoef_1_vld_reg : STD_LOGIC := '0';
    signal ExtCh2LgMultCoef_1_vld_in : STD_LOGIC;
    signal ExtCh2LgMultCoef_1_ack_in : STD_LOGIC;
    signal ExtCh2LgAddCoef_1_data_reg : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal ExtCh2LgAddCoef_1_vld_reg : STD_LOGIC := '0';
    signal ExtCh2LgAddCoef_1_vld_in : STD_LOGIC;
    signal ExtCh2LgAddCoef_1_ack_in : STD_LOGIC;
    signal trunc_ln674_fu_275_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ZmodAwgAxiConfiguration_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ControlAxil : OUT STD_LOGIC_VECTOR (3 downto 0);
        StatusAxil : IN STD_LOGIC_VECTOR (1 downto 0);
        ExtCh1HgMultCoefAxil : OUT STD_LOGIC_VECTOR (17 downto 0);
        ExtCh1HgAddCoefAxil : OUT STD_LOGIC_VECTOR (17 downto 0);
        ExtCh1LgMultCoefAxil : OUT STD_LOGIC_VECTOR (17 downto 0);
        ExtCh1LgAddCoefAxil : OUT STD_LOGIC_VECTOR (17 downto 0);
        ExtCh2HgMultCoefAxil : OUT STD_LOGIC_VECTOR (17 downto 0);
        ExtCh2HgAddCoefAxil : OUT STD_LOGIC_VECTOR (17 downto 0);
        ExtCh2LgMultCoefAxil : OUT STD_LOGIC_VECTOR (17 downto 0);
        ExtCh2LgAddCoefAxil : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component ZmodAwgAxiConfiguration_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ControlAxil => ControlAxil,
        StatusAxil => StatusAxil,
        ExtCh1HgMultCoefAxil => ExtCh1HgMultCoefAxil,
        ExtCh1HgAddCoefAxil => ExtCh1HgAddCoefAxil,
        ExtCh1LgMultCoefAxil => ExtCh1LgMultCoefAxil,
        ExtCh1LgAddCoefAxil => ExtCh1LgAddCoefAxil,
        ExtCh2HgMultCoefAxil => ExtCh2HgMultCoefAxil,
        ExtCh2HgAddCoefAxil => ExtCh2HgAddCoefAxil,
        ExtCh2LgMultCoefAxil => ExtCh2LgMultCoefAxil,
        ExtCh2LgAddCoefAxil => ExtCh2LgAddCoefAxil,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ConfigError_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    DacEnable_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ExtCh1HgAddCoef_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ExtCh1HgMultCoef_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ExtCh1LgAddCoef_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ExtCh1LgMultCoef_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ExtCh1Scale_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ExtCh2HgAddCoef_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ExtCh2HgMultCoef_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ExtCh2LgAddCoef_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ExtCh2LgMultCoef_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ExtCh2Scale_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    InitDoneDAC_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    TestMode_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ConfigError_0_ack_out) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ConfigError_0_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = ConfigError_0_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                ConfigError_0_data_reg <= ConfigError;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = DacEnable_1_vld_in) and (ap_const_logic_1 = DacEnable_1_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = DacEnable_1_vld_reg) and (ap_const_logic_1 = DacEnable_1_vld_in)))) then
                DacEnable_1_data_reg <= trunc_ln674_fu_275_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh1HgAddCoef_1_vld_in) and (ap_const_logic_1 = ExtCh1HgAddCoef_1_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = ExtCh1HgAddCoef_1_vld_reg) and (ap_const_logic_1 = ExtCh1HgAddCoef_1_vld_in)))) then
                ExtCh1HgAddCoef_1_data_reg <= ExtCh1HgAddCoefAxil;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh1HgMultCoef_1_vld_in) and (ap_const_logic_1 = ExtCh1HgMultCoef_1_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = ExtCh1HgMultCoef_1_vld_reg) and (ap_const_logic_1 = ExtCh1HgMultCoef_1_vld_in)))) then
                ExtCh1HgMultCoef_1_data_reg <= ExtCh1HgMultCoefAxil;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh1LgAddCoef_1_vld_in) and (ap_const_logic_1 = ExtCh1LgAddCoef_1_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = ExtCh1LgAddCoef_1_vld_reg) and (ap_const_logic_1 = ExtCh1LgAddCoef_1_vld_in)))) then
                ExtCh1LgAddCoef_1_data_reg <= ExtCh1LgAddCoefAxil;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh1LgMultCoef_1_vld_in) and (ap_const_logic_1 = ExtCh1LgMultCoef_1_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = ExtCh1LgMultCoef_1_vld_reg) and (ap_const_logic_1 = ExtCh1LgMultCoef_1_vld_in)))) then
                ExtCh1LgMultCoef_1_data_reg <= ExtCh1LgMultCoefAxil;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh1Scale_1_vld_in) and (ap_const_logic_1 = ExtCh1Scale_1_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = ExtCh1Scale_1_vld_reg) and (ap_const_logic_1 = ExtCh1Scale_1_vld_in)))) then
                ExtCh1Scale_1_data_reg <= ControlAxil(2 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh2HgAddCoef_1_vld_in) and (ap_const_logic_1 = ExtCh2HgAddCoef_1_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = ExtCh2HgAddCoef_1_vld_reg) and (ap_const_logic_1 = ExtCh2HgAddCoef_1_vld_in)))) then
                ExtCh2HgAddCoef_1_data_reg <= ExtCh2HgAddCoefAxil;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh2HgMultCoef_1_vld_in) and (ap_const_logic_1 = ExtCh2HgMultCoef_1_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = ExtCh2HgMultCoef_1_vld_reg) and (ap_const_logic_1 = ExtCh2HgMultCoef_1_vld_in)))) then
                ExtCh2HgMultCoef_1_data_reg <= ExtCh2HgMultCoefAxil;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh2LgAddCoef_1_vld_in) and (ap_const_logic_1 = ExtCh2LgAddCoef_1_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = ExtCh2LgAddCoef_1_vld_reg) and (ap_const_logic_1 = ExtCh2LgAddCoef_1_vld_in)))) then
                ExtCh2LgAddCoef_1_data_reg <= ExtCh2LgAddCoefAxil;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh2LgMultCoef_1_vld_in) and (ap_const_logic_1 = ExtCh2LgMultCoef_1_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = ExtCh2LgMultCoef_1_vld_reg) and (ap_const_logic_1 = ExtCh2LgMultCoef_1_vld_in)))) then
                ExtCh2LgMultCoef_1_data_reg <= ExtCh2LgMultCoefAxil;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh2Scale_1_vld_in) and (ap_const_logic_1 = ExtCh2Scale_1_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = ExtCh2Scale_1_vld_reg) and (ap_const_logic_1 = ExtCh2Scale_1_vld_in)))) then
                ExtCh2Scale_1_data_reg <= ControlAxil(3 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = InitDoneDAC_0_ack_out) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = InitDoneDAC_0_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = InitDoneDAC_0_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                InitDoneDAC_0_data_reg <= InitDoneDAC;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = TestMode_1_vld_in) and (ap_const_logic_1 = TestMode_1_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = TestMode_1_vld_reg) and (ap_const_logic_1 = TestMode_1_vld_in)))) then
                TestMode_1_data_reg <= ControlAxil(1 downto 1);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, DacEnable_1_ack_in, TestMode_1_ack_in, ExtCh1Scale_1_ack_in, ExtCh2Scale_1_ack_in, ExtCh1HgMultCoef_1_ack_in, ExtCh1HgAddCoef_1_ack_in, ExtCh1LgMultCoef_1_ack_in, ExtCh1LgAddCoef_1_ack_in, ExtCh2HgMultCoef_1_ack_in, ExtCh2HgAddCoef_1_ack_in, ExtCh2LgMultCoef_1_ack_in, ExtCh2LgAddCoef_1_ack_in, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_logic_0 = ExtCh1Scale_1_ack_in) or (ap_const_logic_0 = TestMode_1_ack_in) or (ap_const_logic_0 = DacEnable_1_ack_in) or (ap_const_logic_0 = ExtCh2LgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2LgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2HgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2HgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1LgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1LgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1HgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1HgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2Scale_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    ConfigError_0_ack_out_assign_proc : process(DacEnable_1_ack_in, TestMode_1_ack_in, ExtCh1Scale_1_ack_in, ExtCh2Scale_1_ack_in, ExtCh1HgMultCoef_1_ack_in, ExtCh1HgAddCoef_1_ack_in, ExtCh1LgMultCoef_1_ack_in, ExtCh1LgAddCoef_1_ack_in, ExtCh2HgMultCoef_1_ack_in, ExtCh2HgAddCoef_1_ack_in, ExtCh2LgMultCoef_1_ack_in, ExtCh2LgAddCoef_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = ExtCh1Scale_1_ack_in) or (ap_const_logic_0 = TestMode_1_ack_in) or (ap_const_logic_0 = DacEnable_1_ack_in) or (ap_const_logic_0 = ExtCh2LgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2LgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2HgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2HgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1LgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1LgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1HgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1HgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2Scale_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ConfigError_0_ack_out <= ap_const_logic_1;
        else 
            ConfigError_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    DacEnable <= DacEnable_1_data_reg;

    DacEnable_1_ack_in_assign_proc : process(DacEnable_1_vld_reg)
    begin
        if (((ap_const_logic_0 = DacEnable_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = DacEnable_1_vld_reg)))) then 
            DacEnable_1_ack_in <= ap_const_logic_1;
        else 
            DacEnable_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    DacEnable_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            DacEnable_1_vld_in <= ap_const_logic_1;
        else 
            DacEnable_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ExtCh1HgAddCoef <= ExtCh1HgAddCoef_1_data_reg;

    ExtCh1HgAddCoef_1_ack_in_assign_proc : process(ExtCh1HgAddCoef_1_vld_reg)
    begin
        if (((ap_const_logic_0 = ExtCh1HgAddCoef_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh1HgAddCoef_1_vld_reg)))) then 
            ExtCh1HgAddCoef_1_ack_in <= ap_const_logic_1;
        else 
            ExtCh1HgAddCoef_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    ExtCh1HgAddCoef_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ExtCh1HgAddCoef_1_vld_in <= ap_const_logic_1;
        else 
            ExtCh1HgAddCoef_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ExtCh1HgMultCoef <= ExtCh1HgMultCoef_1_data_reg;

    ExtCh1HgMultCoef_1_ack_in_assign_proc : process(ExtCh1HgMultCoef_1_vld_reg)
    begin
        if (((ap_const_logic_0 = ExtCh1HgMultCoef_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh1HgMultCoef_1_vld_reg)))) then 
            ExtCh1HgMultCoef_1_ack_in <= ap_const_logic_1;
        else 
            ExtCh1HgMultCoef_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    ExtCh1HgMultCoef_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ExtCh1HgMultCoef_1_vld_in <= ap_const_logic_1;
        else 
            ExtCh1HgMultCoef_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ExtCh1LgAddCoef <= ExtCh1LgAddCoef_1_data_reg;

    ExtCh1LgAddCoef_1_ack_in_assign_proc : process(ExtCh1LgAddCoef_1_vld_reg)
    begin
        if (((ap_const_logic_0 = ExtCh1LgAddCoef_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh1LgAddCoef_1_vld_reg)))) then 
            ExtCh1LgAddCoef_1_ack_in <= ap_const_logic_1;
        else 
            ExtCh1LgAddCoef_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    ExtCh1LgAddCoef_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ExtCh1LgAddCoef_1_vld_in <= ap_const_logic_1;
        else 
            ExtCh1LgAddCoef_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ExtCh1LgMultCoef <= ExtCh1LgMultCoef_1_data_reg;

    ExtCh1LgMultCoef_1_ack_in_assign_proc : process(ExtCh1LgMultCoef_1_vld_reg)
    begin
        if (((ap_const_logic_0 = ExtCh1LgMultCoef_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh1LgMultCoef_1_vld_reg)))) then 
            ExtCh1LgMultCoef_1_ack_in <= ap_const_logic_1;
        else 
            ExtCh1LgMultCoef_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    ExtCh1LgMultCoef_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ExtCh1LgMultCoef_1_vld_in <= ap_const_logic_1;
        else 
            ExtCh1LgMultCoef_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ExtCh1Scale <= ExtCh1Scale_1_data_reg;

    ExtCh1Scale_1_ack_in_assign_proc : process(ExtCh1Scale_1_vld_reg)
    begin
        if (((ap_const_logic_0 = ExtCh1Scale_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh1Scale_1_vld_reg)))) then 
            ExtCh1Scale_1_ack_in <= ap_const_logic_1;
        else 
            ExtCh1Scale_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    ExtCh1Scale_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ExtCh1Scale_1_vld_in <= ap_const_logic_1;
        else 
            ExtCh1Scale_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ExtCh2HgAddCoef <= ExtCh2HgAddCoef_1_data_reg;

    ExtCh2HgAddCoef_1_ack_in_assign_proc : process(ExtCh2HgAddCoef_1_vld_reg)
    begin
        if (((ap_const_logic_0 = ExtCh2HgAddCoef_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh2HgAddCoef_1_vld_reg)))) then 
            ExtCh2HgAddCoef_1_ack_in <= ap_const_logic_1;
        else 
            ExtCh2HgAddCoef_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    ExtCh2HgAddCoef_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ExtCh2HgAddCoef_1_vld_in <= ap_const_logic_1;
        else 
            ExtCh2HgAddCoef_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ExtCh2HgMultCoef <= ExtCh2HgMultCoef_1_data_reg;

    ExtCh2HgMultCoef_1_ack_in_assign_proc : process(ExtCh2HgMultCoef_1_vld_reg)
    begin
        if (((ap_const_logic_0 = ExtCh2HgMultCoef_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh2HgMultCoef_1_vld_reg)))) then 
            ExtCh2HgMultCoef_1_ack_in <= ap_const_logic_1;
        else 
            ExtCh2HgMultCoef_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    ExtCh2HgMultCoef_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ExtCh2HgMultCoef_1_vld_in <= ap_const_logic_1;
        else 
            ExtCh2HgMultCoef_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ExtCh2LgAddCoef <= ExtCh2LgAddCoef_1_data_reg;

    ExtCh2LgAddCoef_1_ack_in_assign_proc : process(ExtCh2LgAddCoef_1_vld_reg)
    begin
        if (((ap_const_logic_0 = ExtCh2LgAddCoef_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh2LgAddCoef_1_vld_reg)))) then 
            ExtCh2LgAddCoef_1_ack_in <= ap_const_logic_1;
        else 
            ExtCh2LgAddCoef_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    ExtCh2LgAddCoef_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ExtCh2LgAddCoef_1_vld_in <= ap_const_logic_1;
        else 
            ExtCh2LgAddCoef_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ExtCh2LgMultCoef <= ExtCh2LgMultCoef_1_data_reg;

    ExtCh2LgMultCoef_1_ack_in_assign_proc : process(ExtCh2LgMultCoef_1_vld_reg)
    begin
        if (((ap_const_logic_0 = ExtCh2LgMultCoef_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh2LgMultCoef_1_vld_reg)))) then 
            ExtCh2LgMultCoef_1_ack_in <= ap_const_logic_1;
        else 
            ExtCh2LgMultCoef_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    ExtCh2LgMultCoef_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ExtCh2LgMultCoef_1_vld_in <= ap_const_logic_1;
        else 
            ExtCh2LgMultCoef_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ExtCh2Scale <= ExtCh2Scale_1_data_reg;

    ExtCh2Scale_1_ack_in_assign_proc : process(ExtCh2Scale_1_vld_reg)
    begin
        if (((ap_const_logic_0 = ExtCh2Scale_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ExtCh2Scale_1_vld_reg)))) then 
            ExtCh2Scale_1_ack_in <= ap_const_logic_1;
        else 
            ExtCh2Scale_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    ExtCh2Scale_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ExtCh2Scale_1_vld_in <= ap_const_logic_1;
        else 
            ExtCh2Scale_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    InitDoneDAC_0_ack_out_assign_proc : process(DacEnable_1_ack_in, TestMode_1_ack_in, ExtCh1Scale_1_ack_in, ExtCh2Scale_1_ack_in, ExtCh1HgMultCoef_1_ack_in, ExtCh1HgAddCoef_1_ack_in, ExtCh1LgMultCoef_1_ack_in, ExtCh1LgAddCoef_1_ack_in, ExtCh2HgMultCoef_1_ack_in, ExtCh2HgAddCoef_1_ack_in, ExtCh2LgMultCoef_1_ack_in, ExtCh2LgAddCoef_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = ExtCh1Scale_1_ack_in) or (ap_const_logic_0 = TestMode_1_ack_in) or (ap_const_logic_0 = DacEnable_1_ack_in) or (ap_const_logic_0 = ExtCh2LgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2LgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2HgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2HgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1LgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1LgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1HgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1HgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2Scale_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            InitDoneDAC_0_ack_out <= ap_const_logic_1;
        else 
            InitDoneDAC_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    StatusAxil <= (ConfigError_0_data_reg & InitDoneDAC_0_data_reg);
    TestMode <= TestMode_1_data_reg;

    TestMode_1_ack_in_assign_proc : process(TestMode_1_vld_reg)
    begin
        if (((ap_const_logic_0 = TestMode_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = TestMode_1_vld_reg)))) then 
            TestMode_1_ack_in <= ap_const_logic_1;
        else 
            TestMode_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    TestMode_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            TestMode_1_vld_in <= ap_const_logic_1;
        else 
            TestMode_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(DacEnable_1_ack_in, TestMode_1_ack_in, ExtCh1Scale_1_ack_in, ExtCh2Scale_1_ack_in, ExtCh1HgMultCoef_1_ack_in, ExtCh1HgAddCoef_1_ack_in, ExtCh1LgMultCoef_1_ack_in, ExtCh1LgAddCoef_1_ack_in, ExtCh2HgMultCoef_1_ack_in, ExtCh2HgAddCoef_1_ack_in, ExtCh2LgMultCoef_1_ack_in, ExtCh2LgAddCoef_1_ack_in)
    begin
        if (((ap_const_logic_0 = ExtCh1Scale_1_ack_in) or (ap_const_logic_0 = TestMode_1_ack_in) or (ap_const_logic_0 = DacEnable_1_ack_in) or (ap_const_logic_0 = ExtCh2LgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2LgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2HgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2HgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1LgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1LgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1HgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1HgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2Scale_1_ack_in))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state2_assign_proc : process(DacEnable_1_ack_in, TestMode_1_ack_in, ExtCh1Scale_1_ack_in, ExtCh2Scale_1_ack_in, ExtCh1HgMultCoef_1_ack_in, ExtCh1HgAddCoef_1_ack_in, ExtCh1LgMultCoef_1_ack_in, ExtCh1LgAddCoef_1_ack_in, ExtCh2HgMultCoef_1_ack_in, ExtCh2HgAddCoef_1_ack_in, ExtCh2LgMultCoef_1_ack_in, ExtCh2LgAddCoef_1_ack_in)
    begin
                ap_block_state2 <= ((ap_const_logic_0 = ExtCh1Scale_1_ack_in) or (ap_const_logic_0 = TestMode_1_ack_in) or (ap_const_logic_0 = DacEnable_1_ack_in) or (ap_const_logic_0 = ExtCh2LgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2LgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2HgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2HgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1LgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1LgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1HgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1HgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2Scale_1_ack_in));
    end process;


    ap_done_assign_proc : process(DacEnable_1_ack_in, TestMode_1_ack_in, ExtCh1Scale_1_ack_in, ExtCh2Scale_1_ack_in, ExtCh1HgMultCoef_1_ack_in, ExtCh1HgAddCoef_1_ack_in, ExtCh1LgMultCoef_1_ack_in, ExtCh1LgAddCoef_1_ack_in, ExtCh2HgMultCoef_1_ack_in, ExtCh2HgAddCoef_1_ack_in, ExtCh2LgMultCoef_1_ack_in, ExtCh2LgAddCoef_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = ExtCh1Scale_1_ack_in) or (ap_const_logic_0 = TestMode_1_ack_in) or (ap_const_logic_0 = DacEnable_1_ack_in) or (ap_const_logic_0 = ExtCh2LgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2LgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2HgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2HgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1LgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1LgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1HgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1HgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2Scale_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(DacEnable_1_ack_in, TestMode_1_ack_in, ExtCh1Scale_1_ack_in, ExtCh2Scale_1_ack_in, ExtCh1HgMultCoef_1_ack_in, ExtCh1HgAddCoef_1_ack_in, ExtCh1LgMultCoef_1_ack_in, ExtCh1LgAddCoef_1_ack_in, ExtCh2HgMultCoef_1_ack_in, ExtCh2HgAddCoef_1_ack_in, ExtCh2LgMultCoef_1_ack_in, ExtCh2LgAddCoef_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = ExtCh1Scale_1_ack_in) or (ap_const_logic_0 = TestMode_1_ack_in) or (ap_const_logic_0 = DacEnable_1_ack_in) or (ap_const_logic_0 = ExtCh2LgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2LgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2HgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2HgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1LgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1LgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1HgAddCoef_1_ack_in) or (ap_const_logic_0 = ExtCh1HgMultCoef_1_ack_in) or (ap_const_logic_0 = ExtCh2Scale_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    trunc_ln674_fu_275_p1 <= ControlAxil(1 - 1 downto 0);
end behav;
