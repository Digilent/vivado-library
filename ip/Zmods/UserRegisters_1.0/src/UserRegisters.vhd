-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity UserRegisters is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    Input0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Input1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Input2 : IN STD_LOGIC_VECTOR (31 downto 0);
    Input3 : IN STD_LOGIC_VECTOR (31 downto 0);
    Output0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Output1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Output2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Output3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of UserRegisters is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "UserRegisters_UserRegisters,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=598,HLS_SYN_LUT=568,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal Output0Axil : STD_LOGIC_VECTOR (31 downto 0);
    signal Output1Axil : STD_LOGIC_VECTOR (31 downto 0);
    signal Output2Axil : STD_LOGIC_VECTOR (31 downto 0);
    signal Output3Axil : STD_LOGIC_VECTOR (31 downto 0);
    signal Input0_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Input0_0_vld_reg : STD_LOGIC := '0';
    signal Input0_0_ack_out : STD_LOGIC;
    signal Input1_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Input1_0_vld_reg : STD_LOGIC := '0';
    signal Input1_0_ack_out : STD_LOGIC;
    signal Input2_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Input2_0_vld_reg : STD_LOGIC := '0';
    signal Input2_0_ack_out : STD_LOGIC;
    signal Input3_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Input3_0_vld_reg : STD_LOGIC := '0';
    signal Input3_0_ack_out : STD_LOGIC;
    signal Output0_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Output0_1_vld_reg : STD_LOGIC := '0';
    signal Output0_1_vld_in : STD_LOGIC;
    signal Output0_1_ack_in : STD_LOGIC;
    signal Output1_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Output1_1_vld_reg : STD_LOGIC := '0';
    signal Output1_1_vld_in : STD_LOGIC;
    signal Output1_1_ack_in : STD_LOGIC;
    signal Output2_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Output2_1_vld_reg : STD_LOGIC := '0';
    signal Output2_1_vld_in : STD_LOGIC;
    signal Output2_1_ack_in : STD_LOGIC;
    signal Output3_1_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Output3_1_vld_reg : STD_LOGIC := '0';
    signal Output3_1_vld_in : STD_LOGIC;
    signal Output3_1_ack_in : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component UserRegisters_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        Input0Axil : IN STD_LOGIC_VECTOR (31 downto 0);
        Input1Axil : IN STD_LOGIC_VECTOR (31 downto 0);
        Input2Axil : IN STD_LOGIC_VECTOR (31 downto 0);
        Input3Axil : IN STD_LOGIC_VECTOR (31 downto 0);
        Output0Axil : OUT STD_LOGIC_VECTOR (31 downto 0);
        Output1Axil : OUT STD_LOGIC_VECTOR (31 downto 0);
        Output2Axil : OUT STD_LOGIC_VECTOR (31 downto 0);
        Output3Axil : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component UserRegisters_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        Input0Axil => Input0_0_data_reg,
        Input1Axil => Input1_0_data_reg,
        Input2Axil => Input2_0_data_reg,
        Input3Axil => Input3_0_data_reg,
        Output0Axil => Output0Axil,
        Output1Axil => Output1Axil,
        Output2Axil => Output2Axil,
        Output3Axil => Output3Axil,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    Input0_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Input1_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Input2_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Input3_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Output0_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Output1_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Output2_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    Output3_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = Input0_0_ack_out) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Input0_0_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = Input0_0_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                Input0_0_data_reg <= Input0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = Input1_0_ack_out) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Input1_0_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = Input1_0_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                Input1_0_data_reg <= Input1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = Input2_0_ack_out) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Input2_0_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = Input2_0_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                Input2_0_data_reg <= Input2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = Input3_0_ack_out) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Input3_0_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = Input3_0_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                Input3_0_data_reg <= Input3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Output0_1_vld_in) and (ap_const_logic_1 = Output0_1_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = Output0_1_vld_reg) and (ap_const_logic_1 = Output0_1_vld_in)))) then
                Output0_1_data_reg <= Output0Axil;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Output1_1_vld_in) and (ap_const_logic_1 = Output1_1_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = Output1_1_vld_reg) and (ap_const_logic_1 = Output1_1_vld_in)))) then
                Output1_1_data_reg <= Output1Axil;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Output2_1_vld_in) and (ap_const_logic_1 = Output2_1_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = Output2_1_vld_reg) and (ap_const_logic_1 = Output2_1_vld_in)))) then
                Output2_1_data_reg <= Output2Axil;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Output3_1_vld_in) and (ap_const_logic_1 = Output3_1_vld_reg)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = Output3_1_vld_reg) and (ap_const_logic_1 = Output3_1_vld_in)))) then
                Output3_1_data_reg <= Output3Axil;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, Output0_1_ack_in, Output1_1_ack_in, Output2_1_ack_in, Output3_1_ack_in, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_logic_0 = Output3_1_ack_in) or (ap_const_logic_0 = Output2_1_ack_in) or (ap_const_logic_0 = Output1_1_ack_in) or (ap_const_logic_0 = Output0_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    Input0_0_ack_out_assign_proc : process(Output0_1_ack_in, Output1_1_ack_in, Output2_1_ack_in, Output3_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = Output3_1_ack_in) or (ap_const_logic_0 = Output2_1_ack_in) or (ap_const_logic_0 = Output1_1_ack_in) or (ap_const_logic_0 = Output0_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Input0_0_ack_out <= ap_const_logic_1;
        else 
            Input0_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    Input1_0_ack_out_assign_proc : process(Output0_1_ack_in, Output1_1_ack_in, Output2_1_ack_in, Output3_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = Output3_1_ack_in) or (ap_const_logic_0 = Output2_1_ack_in) or (ap_const_logic_0 = Output1_1_ack_in) or (ap_const_logic_0 = Output0_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Input1_0_ack_out <= ap_const_logic_1;
        else 
            Input1_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    Input2_0_ack_out_assign_proc : process(Output0_1_ack_in, Output1_1_ack_in, Output2_1_ack_in, Output3_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = Output3_1_ack_in) or (ap_const_logic_0 = Output2_1_ack_in) or (ap_const_logic_0 = Output1_1_ack_in) or (ap_const_logic_0 = Output0_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Input2_0_ack_out <= ap_const_logic_1;
        else 
            Input2_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    Input3_0_ack_out_assign_proc : process(Output0_1_ack_in, Output1_1_ack_in, Output2_1_ack_in, Output3_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = Output3_1_ack_in) or (ap_const_logic_0 = Output2_1_ack_in) or (ap_const_logic_0 = Output1_1_ack_in) or (ap_const_logic_0 = Output0_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Input3_0_ack_out <= ap_const_logic_1;
        else 
            Input3_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    Output0 <= Output0_1_data_reg;

    Output0_1_ack_in_assign_proc : process(Output0_1_vld_reg)
    begin
        if (((ap_const_logic_0 = Output0_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Output0_1_vld_reg)))) then 
            Output0_1_ack_in <= ap_const_logic_1;
        else 
            Output0_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    Output0_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Output0_1_vld_in <= ap_const_logic_1;
        else 
            Output0_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    Output1 <= Output1_1_data_reg;

    Output1_1_ack_in_assign_proc : process(Output1_1_vld_reg)
    begin
        if (((ap_const_logic_0 = Output1_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Output1_1_vld_reg)))) then 
            Output1_1_ack_in <= ap_const_logic_1;
        else 
            Output1_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    Output1_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Output1_1_vld_in <= ap_const_logic_1;
        else 
            Output1_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    Output2 <= Output2_1_data_reg;

    Output2_1_ack_in_assign_proc : process(Output2_1_vld_reg)
    begin
        if (((ap_const_logic_0 = Output2_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Output2_1_vld_reg)))) then 
            Output2_1_ack_in <= ap_const_logic_1;
        else 
            Output2_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    Output2_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Output2_1_vld_in <= ap_const_logic_1;
        else 
            Output2_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    Output3 <= Output3_1_data_reg;

    Output3_1_ack_in_assign_proc : process(Output3_1_vld_reg)
    begin
        if (((ap_const_logic_0 = Output3_1_vld_reg) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = Output3_1_vld_reg)))) then 
            Output3_1_ack_in <= ap_const_logic_1;
        else 
            Output3_1_ack_in <= ap_const_logic_0;
        end if; 
    end process;


    Output3_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Output3_1_vld_in <= ap_const_logic_1;
        else 
            Output3_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(Output0_1_ack_in, Output1_1_ack_in, Output2_1_ack_in, Output3_1_ack_in)
    begin
        if (((ap_const_logic_0 = Output3_1_ack_in) or (ap_const_logic_0 = Output2_1_ack_in) or (ap_const_logic_0 = Output1_1_ack_in) or (ap_const_logic_0 = Output0_1_ack_in))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state2_assign_proc : process(Output0_1_ack_in, Output1_1_ack_in, Output2_1_ack_in, Output3_1_ack_in)
    begin
                ap_block_state2 <= ((ap_const_logic_0 = Output3_1_ack_in) or (ap_const_logic_0 = Output2_1_ack_in) or (ap_const_logic_0 = Output1_1_ack_in) or (ap_const_logic_0 = Output0_1_ack_in));
    end process;


    ap_done_assign_proc : process(Output0_1_ack_in, Output1_1_ack_in, Output2_1_ack_in, Output3_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = Output3_1_ack_in) or (ap_const_logic_0 = Output2_1_ack_in) or (ap_const_logic_0 = Output1_1_ack_in) or (ap_const_logic_0 = Output0_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(Output0_1_ack_in, Output1_1_ack_in, Output2_1_ack_in, Output3_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((ap_const_logic_0 = Output3_1_ack_in) or (ap_const_logic_0 = Output2_1_ack_in) or (ap_const_logic_0 = Output1_1_ack_in) or (ap_const_logic_0 = Output0_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

end behav;
